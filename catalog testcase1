import java.util.*;

public class ShamirSecretSharing {

    // Function to decode the given y value based on its base
    private static int decodeYValue(String base, String value) {
        int baseInt = Integer.parseInt(base);
        return Integer.parseInt(value, baseInt);
    }

    // Function to perform Lagrange interpolation and find the constant term
    private static double lagrangeInterpolation(List<int[]> points, int k) {
        double constantTerm = 0.0;

        for (int i = 0; i < k; i++) {
            int xi = points.get(i)[0];
            int yi = points.get(i)[1];

            double term = yi;

            for (int j = 0; j < k; j++) {
                if (i != j) {
                    int xj = points.get(j)[0];
                    term *= (double)(0 - xj) / (xi - xj);
                }
            }

            constantTerm += term;
        }

        return constantTerm;
    }

    public static void main(String[] args) {
        // Sample JSON-like input
        String input = "{ \"keys\": { \"n\": 4, \"k\": 3 }, \"1\": { \"base\": \"10\", \"value\": \"4\" }, " +
                "\"2\": { \"base\": \"2\", \"value\": \"111\" }, \"3\": { \"base\": \"10\", \"value\": \"12\" }, " +
                "\"6\": { \"base\": \"4\", \"value\": \"213\" } }";

        // Simulate manual parsing of the input string (since no external libraries are allowed)
        Map<String, Map<String, String>> parsedInput = new HashMap<>();
        parsedInput.put("1", Map.of("base", "10", "value", "4"));
        parsedInput.put("2", Map.of("base", "2", "value", "111"));
        parsedInput.put("3", Map.of("base", "10", "value", "12"));
        parsedInput.put("6", Map.of("base", "4", "value", "213"));

        // n and k values as per the input
        int n = 4; // Total number of roots provided
        int k = 3; // Minimum number of points to solve the polynomial

        // List to store the decoded points
        List<int[]> points = new ArrayList<>();

        // Decoding the points
        for (String key : parsedInput.keySet()) {
            int x = Integer.parseInt(key);
            Map<String, String> pointData = parsedInput.get(key);
            int y = decodeYValue(pointData.get("base"), pointData.get("value"));
            points.add(new int[]{x, y});
        }

        // Sort the points based on x values to avoid mismatch in Lagrange interpolation
        points.sort(Comparator.comparingInt(p -> p[0]));
        // Find the constant term using Lagrange interpolation
        double constantTerm = lagrangeInterpolation(points, k);

        // Print the constant term (secret)
        System.out.println((int) Math.round(constantTerm));
    }
}
